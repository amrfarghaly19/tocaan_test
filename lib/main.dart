import 'package:flutter/material.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:gymjoe/Auth/login.dart';
import 'package:gymjoe/fitbit/fitbit_page.dart';
import 'package:gymjoe/splash1.dart';
import 'package:gymjoe/theme/widgets/bottombar_provider.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';

import 'localization/app_localization.dart';
import 'localization/prividerlanguage.dart';



void main() {
  WidgetsFlutterBinding.ensureInitialized();

  // Enable fullscreen mode
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);

  // Optionally lock the orientation
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider<LanguageProvider>(
          create: (context) => LanguageProvider(),
        ),
        ChangeNotifierProvider<NavigationProvider>(
          create: (context) => NavigationProvider(),
        ), // Add NavigationProvider here
      ],
      child: FigmaToCodeApp(),
    ),
  );
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
   FigmaToCodeApp({super.key});

  // Define your primary color and other theme-related colors here
  final Color primaryColor = Colors.white!; // Example primary color
  final Color defaultForegroundColor = Colors.white; // Default text and icon color


  @override
  Widget build(BuildContext context) {
    return Consumer<LanguageProvider>(
      builder: (context, languageProvider, _) {
        return MaterialApp(
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            // Define the default brightness and colors.
            brightness: Brightness.dark, // Optional: Set overall brightness
            primaryColor: primaryColor,

            // Define the default ElevatedButton theme.
            elevatedButtonTheme: ElevatedButtonThemeData(
              style: ElevatedButton.styleFrom(
                foregroundColor: defaultForegroundColor, backgroundColor: primaryColor, // Foreground color (text & icon)
                // You can add other default styles here
                textStyle: TextStyle(fontSize: 16),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              ),
            ),

            // Optionally, define other button themes (TextButton, OutlinedButton) similarly
            // textButtonTheme: TextButtonThemeData(...),
            // outlinedButtonTheme: OutlinedButtonThemeData(...),

            // Define default icon theme if needed
            iconTheme: IconThemeData(
              color: defaultForegroundColor,
              size: 24,
            ),

            // Define default text theme
            textTheme: TextTheme(
              labelLarge: TextStyle(
                color: defaultForegroundColor,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            floatingActionButtonTheme: FloatingActionButtonThemeData(
              backgroundColor: Color(0xFFff0336), // Default FAB background color
              foregroundColor: defaultForegroundColor, // Default FAB icon and text color
              elevation: 6.0, // Default elevation
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(50), // Rounded corners
              ),
              // You can add more default FAB properties here
            ),
          ),
          title: 'Efficient Link Chat',
          localizationsDelegates: [
            AppLocalizationDelegate(),
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          supportedLocales: const [
            Locale('en', ''),
            Locale('ar', ''), // Arabic
          ],
          locale: Locale(
            languageProvider.selectedLanguage.isNotEmpty
                ? languageProvider.selectedLanguage
                : 'en',
          ),
          localeResolutionCallback: (locale, supportedLocales) {
            if (locale != null) {
              for (var supportedLocale in supportedLocales) {
                if (supportedLocale.languageCode == locale.languageCode &&
                    supportedLocale.countryCode == locale.countryCode) {
                  Intl.defaultLocale = supportedLocale.languageCode;
                  return supportedLocale;
                }
              }
            }
            Intl.defaultLocale = 'en';
            return const Locale('en', '');
          },
          builder: (context, child) {
            final textDirection = AppLocalization.of(context).getAppDirection();
            return Directionality(
              textDirection: textDirection,
              child: child!,
            );
          },
          home: Splash1(),

        );
      },
    );


  }
}



/*return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: //FitbitLoginPage(),

      Splash1(),

    );*/